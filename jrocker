#!/usr/bin/env bash

param=$#
serv=$1
variable=$2
port=${variable:-8686}

arr[1]='up'
arr[2]='dn'
arr[3]='ss'
arr[4]='ex'
arr[5]='ims'
arr[6]='rmi'

function usage {
	if [ "$param" -gt 2 -o "${param}" -lt 1 ]
	then
		echo "Usage:"
		echo "	jrocker [up|dn|ss|ex|ims|rmi] [port|image-id]"
		echo "Details:"
		echo "	up -> startup a container for jrocker, default port 8686."
		echo "	dn -> shutdown a container or all container of jrocker."
		echo "	ex -> exec jrocker container."
		echo "	ss -> status of jrocker container."
		echo "	ims -> list images of chunjiesamliu/jrocker"
		echo "	rmi -> remove image of chunjiesamliu/jrocker"
		echo "For example:"
		echo "	jrocker up 9191"
		exit 1
	fi

	if [[ ! "${arr[@]}" =~ "$serv" ]]
	then
		echo "Error:"
		echo "	Input must be one of 'up', 'dn', 'ss', 'ex', 'ims' and 'rmi' to start jrocker"
		echo "Example:"
		echo "	jrocker ss"
		exit 1
	fi
}


function cpf {
	d=$1
	for i in `find ${HOME} -mindepth 1 -prune -name '.*'`;
	do
		name=`basename ${i}`
		[[ ${name} =~ '.rstudio' ]] && continue
		cmd="cp -rf ${i} ${d}/${name}"
		eval ${cmd}
	done
}

function up {
	cs=(`docker ps|grep -o Jrocker.*$`)
	[[ ${cs[@]} =~ "Jrocker-${port}" ]] && echo "Error: Jrocker-${port} exists." && exit 1

	[[ ${port} -lt 8686 ]] && echo "Error: New port should be larger than 8686." && exit 1

	jd=${HOME}/.rstudio-cj/Jrocker-${port}

		[[ ! -d ${jd} ]] \
		&& mkdir -p ${jd} \
		&& cpf ${jd} \
		&& ln -s /data/liucj ${jd}/data \
		&& ln -s /project/liucj ${jd}/project \
		&& ln -s /data/liucj/github ${jd}/github \
		&& ln -s /data/liucj/R ${jd}/R \
		&& ln -s /data/liucj/scripts ${jd}/scripts \
		&& ln -s /data/liucj/tools ${jd}/tools

		docker run -d -p ${port}:8787 \
		-v ${jd}:/home/liucj/ \
		-v /data/liucj/:/home/liucj/data/ \
		-v /project/liucj/:/home/liucj/project/ \
		-v /data/liucj/R/:/home/liucj/R/ \
		-v /data/liucj/scripts/:/home/liucj/scripts/ \
		-v /data/liucj/tools/:/home/liucj/tools/ \
		-e USER=username -e PASSWORD=password \
		-e USERID=$EUID -e GROUPID=$EUID -e ROOT=TRUE \
		--name Jrocker-${port} chunjiesamliu/jrocker:latest

	echo "Start Jrocker successfully with port ${port}."
}

function dn {
	cs=(`docker ps|grep -o Jrocker.*$`)
	if [ ${param} -eq 2 ]
	then
		c="Jrocker-${port}"
		if [[ ${cs[@]} =~ ${port} ]] 
		then
			docker container stop ${c}
			echo "Container ${c} is stopped"
			docker container rm ${c}
			echo "Container ${c} is removed"
		else
			echo "Error: Container ${c} not in the docker ps"
		fi
	else
		echo "Notice: You are going to stop all Jrocker container ${cs[@]}."
		echo "Input (yes/no):"
		read choice
		case ${choice} in
			yes)
				echo "All jrocker container stopped."
				for c in ${cs[@]};
				do
					docker container stop ${c}
					echo "Container ${c} is stopped"
					docker container rm ${c}
					echo "Container ${c} is removed"
				done
				;;
			no)
				echo "No Jrocker container stopped."
				;;
			*)
				echo "No Jrocker container stopped."
				;;
		esac
	fi
}

function ss {
	info=`docker ps|grep Jrocker`
	[[ -z ${info} ]] && echo "Notice: no Jrocker container." || docker ps|grep Jrocker
}

function ex {
	cs=(`docker ps|grep -o Jrocker.*$`)
	c="Jrocker-${port}"
	[[ ${param} -ne 2 ]] && echo "Error: Input port for container." && ss && exit 1

	if [[ ${param} -eq 2 && ${cs[@]} =~ ${port} ]]
	then
		docker exec -it -u liucj:root -w ~ ${c} bash
	else
		echo "Notice: Input valid jrocker port."
		docker ps|grep Jrocker
	fi
}

function ims {
	docker image ls chunjiesamliu/jrocker
}

function rmi {
	if [ ${param} -eq 2 ]
	then
		docker image rm ${variable}
	else
		echo "Notice: Input valid jrocker image."
		exit 1
	fi
	 
}

usage
[[ ${serv} = 'up' ]] && up || usage
[[ ${serv} = 'dn' ]] && dn || usage
[[ ${serv} = 'ss' ]] && ss || usage
[[ ${serv} = 'ex' ]] && ex || usage
[[ ${serv} = 'ims' ]] && ims || usage
[[ ${serv} = 'rmi' ]] && rmi || usage
